---

    # Gets the current public IP of the localhost
    - name: Get currennt public IP
      ansible.builtin.uri:
        url: https://api.ipify.org
        return_content: yes
      register: my_ip
    

    - name: Get public IP of the system's ssh client
      ansible.builtin.shell: echo $SSH_CLIENT | awk '{print $1}'
      register: ssh_client_ip

    # Creates a new key pair and defines the keyout variable with the private key's value
    - name: Create key pair for the instance
      ec2_key:
        name: docker-host-key
        region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
      register: keyout

    # Saves the key to a .pem file if the value of the key
    - name: save private key
      copy:
        content: "{{ keyout.key.private_key }}"
        dest: "{{ lookup('env','HOME') }}/.ssh/docker-server-key.pem"
        mode: '0600'
      when: keyout.changed
  
    - name: Create a security group for the instance's development environment
      amazon.aws.ec2_security_group:
        name: "Docker-sg"
        description: "Security group for the instance's development environment"
        vpc_id: vpc-0a939c19442ae9cf8
        region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
        rules:
          
          # access for control_vm
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content }}/32"

          # access for my system' browser
          - proto: tcp # access to the Django API
            from_port: 8000
            to_port: 8000
            cidr_ip: "{{ ssh_client_ip.stdout }}/32"
          - proto: tcp # access to the Vue frontend
            from_port: 5173
            to_port: 5173
            cidr_ip: "{{ ssh_client_ip.stdout }}/32"
          - proto: tcp # access to the MailhogUI
            from_port: 8025
            to_port: 8025
            cidr_ip: "{{ ssh_client_ip.stdout }}/32"

        state: present
      register: security_group_dev
      when: dev_environment | bool

    - name: Create a security group for the instance's production environment
      amazon.aws.ec2_security_group:
        name: "Docker-sg"
        description: "Security group for the Docker host"
        vpc_id: vpc-0a939c19442ae9cf8
        region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
        rules:

          # access for control_vm
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip.content }}/32"

          # access for my system's browser
          - proto: tcp # http access to the nginx server
            from_port: 80 
            to_port: 80
            cidr_ip: "0.0.0.0/0"
          - proto: tcp  # https access to the nginx server
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"
        
        state: present
      register: security_group_prod
      when: not dev_environment | bool

    # Create an EC2 instance
    - name: Launch the Docker host
      amazon.aws.ec2_instance:
        name: "docker_server"
        image_id: ami-020cba7c55df1f615
        key_name: docker-host-key
        instance_type: t2.micro
        exact_count: 1
        region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
        network_interfaces:
          - device_index: 0
            subnet_id: subnet-0e36781135332841e
            groups:
              - "{{ dev_environment | ternary(security_group_dev.group_id, security_group_prod.group_id) }}"
            assign_public_ip: true
        wait: yes
        tags:
          Environment: Docker
      register: ec2

    - name: Create A record for domain in Route 53
      amazon.aws.route53:
        zone: "myretirement.click."
        record: "myretirement.click"
        type: A
        value: "{{ ec2.instances[0].public_ip_address }}"
        ttl: 300
        state: present
        overwrite: true
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_credentials.aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_credentials.aws_secret_access_key }}"

    - name: Save EC2 instance's IP as fact
      set_fact:
        docker_host_ip: "{{ ec2.instances[0].public_ip_address }}"

    - name: Add the EC2 instance on dynamic inventory
      add_host:
        name: "{{ ec2.instances[0].public_ip_address }}"
        groups: 
          - docker_server
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/docker-server-key.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Save the EC2 instance on a static inventory
      copy:
        dest: "./inventory_docker.ini"
        content: |
          [docker_server]
          {{ ec2.instances[0].public_ip_address }} ansible_user=ubuntu ansible_ssh_private_key_file={{ lookup('env','HOME') }}/.ssh/docker-server-key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'

    - name: Wait for SSH connection
      ansible.builtin.wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        state: started
      delegate_to: localhost
