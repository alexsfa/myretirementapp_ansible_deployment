---

    # Gets the current public IP of the localhost
    - name: Get current public IP
      ansible.builtin.uri:
        url: https://api.ipify.org
        return_content: yes
      register: control_host_ip
      
    - name: Print public IP
      ansible.builtin.debug:
       msg: "{{ control_host_ip.content }}"
    

    - name: Get public IP of the system's ssh client
      ansible.builtin.shell: echo $SSH_CLIENT | awk '{print $1}'
      register: ssh_client_ip

    # Creates a new key pair and defines the keyout variable with the private key's value
    - name: Create key pair for the instance
      ec2_key:
        name: docker-host-key
        region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
      register: keyout

    # Saves the key to a .pem file if the value of the key
    - name: save private key
      copy:
        content: "{{ keyout.key.private_key }}"
        dest: "{{ lookup('env','HOME') }}/.ssh/docker-server-key.pem"
        mode: '0600'
      when: keyout.changed
  
    - name: Create a security group for the instance
      amazon.aws.ec2_security_group:
        name: "Docker-sg"
        description: "Security group for the Docker host"
        vpc_id: "{{ network_config.vpc_id }}"
        region: "{{ lookup('env','AWS_DEFAULT_REGION') }}"
        rules: >-
          {{
            [{'proto': 'tcp', 'from_port':22, 'to_port':22, 'cidr_ip':  control_host_ip.content + '/32' }] +
            (
              [
                {'proto': 'tcp', 'from_port':8000, 'to_port':8000, 'cidr_ip': ssh_client_ip.stdout + '/32' },
                {'proto': 'tcp', 'from_port':5173, 'to_port':5173, 'cidr_ip': ssh_client_ip.stdout + '/32' },
                {'proto': 'tcp', 'from_port':8025, 'to_port':8025, 'cidr_ip': ssh_client_ip.stdout + '/32' }
              ] if dev_environment | bool else
              [
                {'proto':'tcp', 'from_port':80, 'to_port':80, 'cidr_ip': "0.0.0.0/0"},
                {'proto':'tcp', 'from_port':80, 'to_port':80, 'cidr_ipv6': "::/0"},
                {'proto':'tcp', 'from_port':443, 'to_port':443, 'cidr_ip': "0.0.0.0/0"},
                {'proto':'tcp', 'from_port':443, 'to_port':443, 'cidr_ipv6': "::/0"},
                {'proto': 'tcp', 'from_port':8025, 'to_port':8025, 'cidr_ip': ssh_client_ip.stdout + '/32' }
              ]
            )
          }}    
        state: present
      register: security_group

    # Create an EC2 instance
    - name: Launch the Docker host
      amazon.aws.ec2_instance:
        name: "docker_server"
        image_id: ami-020cba7c55df1f615
        key_name: docker-host-key
        instance_type: t2.micro
        exact_count: 1
        region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
        network_interfaces:
          - device_index: 0
            subnet_id: "{{ network_config.subnet_id }}"
            groups:
              - "{{ security_group.group_id }}"
            assign_public_ip: true
        wait: yes
        tags:
          Environment: Docker
      register: ec2

    - name: Create A record for domain in Route 53
      amazon.aws.route53:
        zone: "myretirement.click."
        record: "myretirement.click"
        type: A
        value: "{{ ec2.instances[0].public_ip_address }}"
        ttl: 300
        state: present
        overwrite: true
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_credentials.aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_credentials.aws_secret_access_key }}"
      when: not dev_environment

    - name: Add the EC2 instance on dynamic inventory
      add_host:
        name: "{{ ec2.instances[0].public_ip_address }}"
        groups: 
          - docker_server
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/docker-server-key.pem"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        
    - name: Set Docker host IP as a fact
      set_fact:
        docker_host_ip: "{{ ec2.instances[0].public_ip_address }}"

    - name: Wait for SSH connection
      ansible.builtin.wait_for:
        host: "{{ ec2.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        state: started
      delegate_to: localhost
