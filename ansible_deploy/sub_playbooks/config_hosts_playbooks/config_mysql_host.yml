---
- name: Install and configure all the prerequirements on the MySQL host
  hosts: mysql_servers
  become: yes
  vars_files:
    - ../vars/db_credentials.yml
  vars:
    dev_environment: "{{ hostvars['localhost'].dev_environment | bool }}"
  tasks:
  
    - name: Update apt
      apt:
        update_cache: yes
        
    - name: Install MySQL and verify that is running
      block:
          
        - name: Install MySQL
          package:
            name: "{{ item }}"
            state: present
          loop:
            - mysql-server
            - python3-pymysql  # required for Ansible MySQL modules
        
        - name: Ensure MySQL service is running
          service:
            name: mysql
            state: started
            enabled: yes
    
    - name: Configure MySQL to bind to server IP
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^bind-address'
        line: "bind-address = 0.0.0.0"
        backup: yes
      notify:
        - Restart MySQL
        - Wait for MySQL to restart
      
    
    - name: Create admin user for Ansible
      mysql_user:
        name: "{{ DB_ADMIN_NAME }}"
        password: "{{ DB_ADMIN_PASS }}"
        priv: "*.*:ALL,GRANT"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
            
    - name: Create application db
      mysql_db:
        name: "{{ item }}"
        state: present
        login_user: "{{ DB_ADMIN_NAME }}"
        login_password: "{{ DB_ADMIN_PASS }}"
      loop: "{{ ( [ dev_db_credentials.DB_NAME,'test_' ~ dev_db_credentials.DB_NAME ] if dev_environment else [ prod_db_credentials.DB_NAME ] ) }}"
            
    - name: Create application user
      mysql_user:
        name: "{{ dev_environment | ternary(dev_db_credentials.DB_USER, prod_db_credentials.DB_USER) }}"
        host: "{{ hostvars['localhost'].django_host_private_ip }}"
        password: "{{ dev_environment | ternary(dev_db_credentials.DB_PASS, prod_db_credentials.DB_PASS) }}"
        state: present
        login_user: "{{ DB_ADMIN_NAME }}"
        login_password: "{{ DB_ADMIN_PASS }}"
        
    - name: Grant privileges on dbname
      mysql_user:
        name: "{{ dev_environment | ternary(dev_db_credentials.DB_USER, prod_db_credentials.DB_USER) }}"
        host: "{{ hostvars['localhost'].django_host_private_ip }}"
        password: "{{ dev_environment | ternary(dev_db_credentials.DB_PASS, prod_db_credentials.DB_PASS) }}"
        priv: "{{ dev_environment | ternary(dev_db_credentials.DB_NAME, prod_db_credentials.DB_NAME) }}.*:ALL"
        state: present
        login_user: "{{ DB_ADMIN_NAME }}"
        login_password: "{{ DB_ADMIN_PASS }}"
        append_privs: yes

    - name: Grant privileges on test_dbname
      mysql_user:
        name: "{{ dev_db_credentials.DB_USER }}"
        host: "{{ hostvars['localhost'].django_host_private_ip }}"
        password: "{{ dev_db_credentials.DB_PASS }}"
        priv: "test_{{ dev_db_credentials.DB_NAME }}.*:ALL"
        state: present
        login_user: "{{ DB_ADMIN_NAME }}"
        login_password: "{{ DB_ADMIN_PASS }}"
        append_privs: yes
      when: dev_environment
      
  handlers:
      
    - name: Restart MySQL 
      service:
        name: mysql
        state: restarted
          
    - name: Wait for MySQL to restart
      wait_for:
        port: 3306
        host: 0.0.0.0
        state: started
        delay: 10
        timeout: 30
          

        
        
      

        
    
  
    