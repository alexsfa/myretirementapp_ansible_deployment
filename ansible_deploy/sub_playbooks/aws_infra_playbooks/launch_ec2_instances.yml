---
- name: Create SGs for each component's host
  hosts: localhost
  vars_files:
   - ../vars/aws_credentials.yml
  tasks:
  
  - name: Create the Vue host's instance and confirm that it's reachable
    block:
    
      - name: Check for existing Vue host
        amazon.aws.ec2_instance_info:
          region: "{{ AWS_DEFAULT_REGION }}"
          filters:
            "tag:Name": vue_host
            "instance-state-name": running
        register: vue_host_running
    
      - name: Launch the Vue host
        amazon.aws.ec2_instance:
          name: "vue_host"
          image_id: ami-020cba7c55df1f615
          key_name: vue-host-key
          instance_type: t2.micro
          count: 1
          region: "{{ AWS_DEFAULT_REGION }}"
          network_interfaces:
            - device_index: 0
              subnet_id: "{{ network_config.subnet_id }}"
              groups:
               - "{{ vue_sg_id }}"
              assign_public_ip: true
          wait: yes
          tags:
            Name: vue
            Environment: "{{ 'dev' if dev_environment | bool else 'prod' }}"
        when: vue_host_running.instances | length == 0
        register: vue_host
              
      - name: Set host IP fact
        set_fact:
          vue_host_public_ip: "{{ (vue_host.instances[0].public_ip_address if vue_host.changed else vue_host_running.instances[0].public_ip_address) | trim }}"
          vue_host_private_ip: "{{ (vue_host.instances[0].private_ip_address if vue_host.changed else vue_host_running.instances[0].private_ip_address) | trim }}"
          vue_host: "{{ vue_host }}"
          
      - name: Add the Vue host on dynamic inventory
        add_host:
          name: "{{ vue_host_public_ip }}"
          groups: 
            - vue_servers
          ansible_user: ubuntu
          ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/vue-host-key.pem"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
          
      - name: Wait for SSH connection with Vue host
        ansible.builtin.wait_for:
          host: "{{ vue_host_public_ip }}"
          port: 22
          timeout: 300
          state: started
        delegate_to: localhost
        
  - name: Create the Django host's instance and confirm that it's reachable
    block:
    
      - name: Check for existing Django host
        amazon.aws.ec2_instance_info:
          region: "{{ AWS_DEFAULT_REGION }}"
          filters:
            "tag:Name": django_host
            "instance-state-name": running
        register: django_host_running
    
      - name: Launch the Django host
        amazon.aws.ec2_instance:
          name: "django_host"
          image_id: ami-020cba7c55df1f615
          key_name: django-host-key
          instance_type: t2.micro
          region: "{{ AWS_DEFAULT_REGION }}"
          count: 1
          network_interfaces:
            - device_index: 0
              subnet_id: "{{ network_config.subnet_id }}"
              groups:
                - "{{ django_sg_id }}"
              assign_public_ip: true
          wait: yes
          tags:
            Name: django
            Environment: "{{ 'dev' if dev_environment | bool else 'prod' }}"
        when: django_host_running.instances | length == 0
        register: django_host
        
      - name: Set host IP fact
        set_fact:
          django_host_public_ip: "{{ (django_host.instances[0].public_ip_address if django_host.changed else django_host_running.instances[0].public_ip_address) | trim }}"
          django_host_private_ip: "{{ (django_host.instances[0].private_ip_address if django_host.changed else django_host_running.instances[0].private_ip_address) | trim }}"
              
      - name: Add the Django host on dynamic inventory
        add_host:
          name: "{{ django_host_public_ip }}"
          groups: 
            - django_servers
          ansible_user: ubuntu
          ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/django-host-key.pem"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

      - name: Wait for SSH connection with Django host
        ansible.builtin.wait_for:
          host: "{{ django_host_public_ip }}"
          port: 22
          timeout: 300
          state: started
        delegate_to: localhost
        
  - name: Create the MySql host's instance and confirm that it's reachable
    block:
    
      - name: Check for existing MySql host
        amazon.aws.ec2_instance_info:
          region: "{{ AWS_DEFAULT_REGION }}"
          filters:
            "tag:Name": mysql_host
            "instance-state-name": running
        register: mysql_host_running
    
      - name: Launch the MySql host
        amazon.aws.ec2_instance:
          name: "mysql_host"
          image_id: ami-020cba7c55df1f615
          key_name: mysql-host-key
          instance_type: t2.micro
          region: "{{ AWS_DEFAULT_REGION }}"
          count: 1
          network_interfaces:
            - device_index: 0
              subnet_id: "{{ network_config.subnet_id }}"
              groups:
                - "{{ mysql_sg_id }}"
              assign_public_ip: true
          wait: yes
          tags:
            Name: mysql
            Environment: "{{ 'dev' if dev_environment | bool else 'prod' }}"
        when: mysql_host_running.instances | length == 0  
        register: mysql_host
        
      - name: Set host IP fact
        set_fact:
          mysql_host_public_ip: "{{ (mysql_host.instances[0].public_ip_address if mysql_host.changed else mysql_host_running.instances[0].public_ip_address) | trim }}"
          mysql_host_private_ip: "{{ (mysql_host.instances[0].private_ip_address if mysql_host.changed else mysql_host_running.instances[0].private_ip_address) | trim }}"
              
      - name: Add the MySQL host on dynamic inventory
        add_host:
          name: "{{ mysql_host_public_ip }}"
          groups: 
            - mysql_servers
          ansible_user: ubuntu
          ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/mysql-host-key.pem"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

      - name: Wait for SSH connection with MySQL host
        ansible.builtin.wait_for:
          host: "{{ mysql_host_public_ip }}"
          port: 22
          timeout: 300
          state: started
        delegate_to: localhost
    
  - name: Create the Mailhog host's instance and confirm that it's reachable
    block:
    
      - name: Check for existing Mailhog host
        amazon.aws.ec2_instance_info:
          region: "{{ AWS_DEFAULT_REGION }}"
          filters:
            "tag:Name": mailhog_host
            "instance-state-name": running
        register: mailhog_host_running
    
      - name: Launch the Mailhog host
        amazon.aws.ec2_instance:
          name: "mailhog_host"
          image_id: ami-020cba7c55df1f615
          key_name: mailhog-host-key
          instance_type: t2.micro
          region: "{{ AWS_DEFAULT_REGION }}"
          count: 1
          network_interfaces:
            - device_index: 0
              subnet_id: "{{ network_config.subnet_id }}"
              groups:
                - "{{ mailhog_sg_id }}"
              assign_public_ip: true
          wait: yes
          tags:
            Name: mailhog
            Environment: "{{ 'dev' if dev_environment | bool else 'prod' }}"
        when: mailhog_host_running.instances | length == 0
        register: mailhog_host
        
      - name: Set host IP fact
        set_fact:
          mailhog_host_public_ip: "{{ (mailhog_host.instances[0].public_ip_address if mailhog_host.changed else mailhog_host_running.instances[0].public_ip_address) | trim }}"
          mailhog_host_private_ip: "{{ (mailhog_host.instances[0].private_ip_address if mailhog_host.changed else mailhog_host_running.instances[0].private_ip_address) | trim }}"
              
      - name: Add the Mailhog host on dynamic inventory
        add_host:
          name: "{{ mailhog_host_public_ip }}"
          groups: 
            - mailhog_servers
          ansible_user: ubuntu
          ansible_ssh_private_key_file: "{{ lookup('env','HOME') }}/.ssh/mailhog-host-key.pem"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

      - name: Wait for SSH connection with Mailhog host
        ansible.builtin.wait_for:
          host: "{{ mailhog_host_public_ip }}"
          port: 22
          timeout: 300
          state: started
        delegate_to: localhost
        
        
  - name: Create A record for domain in Route 53
    amazon.aws.route53:
      zone: "myretirement.click."
      record: "myretirement.click"
      type: A
      value: "{{ vue_host_public_ip }}"
      ttl: 300
      state: present
      overwrite: true
    environment:
      AWS_ACCESS_KEY_ID: "{{ aws_credentials.aws_access_key }}"
      AWS_SECRET_ACCESS_KEY: "{{ aws_credentials.aws_secret_access_key }}"
    when: not dev_environment
               
